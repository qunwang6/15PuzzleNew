"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.posthtmlHash = exports.hash = exports.replaceHash = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var hasha_1 = __importDefault(require("hasha"));
var DEFAULT_HASH_LENGTH = 20;
var DEFAULT_PATTERN = new RegExp(/\[hash.*]/g);
function replaceHash(str, buffer, exp, hashLength) {
    var match = str.match(exp);
    var _a = match[0].replace(/\[|]/g, "").split(":"), _ = _a[0], len = _a[1];
    return str.replace(exp, hasha_1["default"](buffer).slice(0, Number(len) || hashLength));
}
exports.replaceHash = replaceHash;
function plugin(options) {
    return function posthtmlHash(tree) {
        var exp = (options === null || options === void 0 ? void 0 : options.pattern) || DEFAULT_PATTERN;
        var hashLength = (options === null || options === void 0 ? void 0 : options.hashLength) || DEFAULT_HASH_LENGTH;
        tree.match([{ attrs: { href: exp } }, { attrs: { src: exp } }], function (node) {
            var _node = node;
            var _a = _node.attrs, href = _a.href, src = _a.src;
            var fileName = "";
            if (href) {
                fileName = href;
            }
            else if (src) {
                fileName = src;
            }
            var pathToFile = (options === null || options === void 0 ? void 0 : options.path) || "";
            var file = path_1["default"].join(process.cwd(), pathToFile, fileName);
            if (fs_1["default"].existsSync(file)) {
                var buffer = fs_1["default"].readFileSync(file);
                var hashedFileName = replaceHash(fileName, buffer, exp, hashLength);
                var hashedFile = path_1["default"].join(process.cwd(), pathToFile, hashedFileName);
                fs_1["default"].renameSync(file, hashedFile);
                if (href) {
                    _node.attrs.href = hashedFileName;
                }
                else if (src) {
                    _node.attrs.src = hashedFileName;
                }
            }
            return node;
        });
    };
}
exports.hash = plugin;
exports.posthtmlHash = plugin;
exports["default"] = plugin;
